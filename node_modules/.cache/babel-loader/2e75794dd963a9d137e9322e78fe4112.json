{"ast":null,"code":"import { useCallback, useReducer, useEffect, useState } from \"react\";\nimport { EAST, INIT_STATE, NORTH, SOUTH, WEST } from \"../initialState.js\";\nimport { random_food } from \"../logic.js\";\n\nfunction useKeyPress(targetKey) {\n  // State for keeping track of whether key is pressed\n  const [keyPressed, setKeyPressed] = useState(false); // If pressed key is our target key then set to true\n\n  const downHandler = useCallback(({\n    key\n  }) => {\n    if (key === targetKey) {\n      setKeyPressed(true);\n    }\n  }, [targetKey]); // If released key is our target key then set to false\n\n  const upHandler = useCallback(({\n    key\n  }) => {\n    if (key === targetKey) {\n      setKeyPressed(false);\n    }\n  }, [targetKey]); // Add event listeners\n\n  useEffect(() => {\n    window.addEventListener(\"keydown\", downHandler);\n    window.addEventListener(\"keyup\", upHandler); // Remove event listeners on cleanup\n\n    return () => {\n      window.removeEventListener(\"keydown\", downHandler);\n      window.removeEventListener(\"keyup\", upHandler);\n    };\n  }, [downHandler, upHandler]); // Empty array ensures that effect is only run on mount and unmount\n\n  return keyPressed;\n}\n\nexport default function useSnake() {\n  const [currentDirection, setCurrentDirection] = useState();\n  const wPress = useKeyPress(\"w\");\n  const sPress = useKeyPress(\"s\");\n  const aPress = useKeyPress(\"a\");\n  const dPress = useKeyPress(\"d\");\n\n  const snakeRedcuer = (state, action) => {\n    switch (action.type) {\n      case \"MOVE\":\n        const snake = state.snake;\n        let coords = {\n          x: snake[0].x,\n          y: snake[0].y\n        };\n\n        if (snake[0].x < 0) {\n          coords = {\n            x: state.cols - 1,\n            y: snake[0].y\n          };\n        } else if (snake[0].x >= state.cols) {\n          coords = {\n            x: 0,\n            y: snake[0].y\n          };\n        } else if (snake[0].y < 0) {\n          coords = {\n            x: snake[0].x,\n            y: state.rows - 1\n          };\n        } else if (snake[0].y >= state.rows) {\n          coords = {\n            x: snake[0].x,\n            y: 0\n          };\n        } else {\n          coords = {\n            x: state.snake[0].x + action.direction.x,\n            y: state.snake[0].y + action.direction.y\n          };\n        }\n\n        snake.unshift(coords);\n        let end = false;\n\n        for (let i = 3; i < snake.length; i++) {\n          const has_collided = snake[i].x === snake[0].x && snake[i].y === snake[0].y;\n          if (has_collided) end = true;\n        }\n\n        if (end) {\n          setCurrentDirection(undefined);\n          return { ...state,\n            moves: [EAST],\n            snake: [{\n              x: 2,\n              y: 2\n            }],\n            apple: {\n              x: 16,\n              y: 2\n            }\n          };\n        }\n\n        return { ...state,\n          moves: [...state.moves, action.direction],\n          snake: snake\n        };\n\n      case \"EAT\":\n        let apple_x = state.apple.x;\n        let apple_y = state.apple.y;\n        const hasEatenFood = state.snake[0].x === apple_x && state.snake[0].y === apple_y;\n\n        if (hasEatenFood) {\n          const apple_x = random_food(0, state.cols - 1);\n          const apple_y = random_food(0, state.rows - 1);\n          console.log(apple_x, apple_y);\n          return { ...state,\n            apple: {\n              x: apple_x,\n              y: apple_y\n            }\n          };\n        } else if (state.snake.length > 1) {\n          const snake = state.snake;\n          snake.pop();\n          return { ...state,\n            snake: snake\n          };\n        }\n\n        return state;\n\n      case \"END_GAME\":\n        return INIT_STATE;\n\n      default:\n        break;\n    }\n  };\n\n  const [state, dispatch] = useReducer(snakeRedcuer, INIT_STATE);\n  const moveSnakeHandler = useCallback(() => {\n    switch (true) {\n      case wPress:\n        if (currentDirection !== NORTH && currentDirection !== SOUTH) setCurrentDirection(NORTH);\n        break;\n\n      case sPress:\n        if (currentDirection !== SOUTH && currentDirection !== NORTH) setCurrentDirection(SOUTH);\n        break;\n\n      case aPress:\n        if (currentDirection !== WEST && currentDirection !== EAST) setCurrentDirection(WEST);\n        break;\n\n      case dPress:\n        if (currentDirection !== WEST && currentDirection !== EAST) setCurrentDirection(EAST);\n        break;\n\n      default:\n        break;\n    }\n  }, [aPress, currentDirection, dPress, sPress, wPress]);\n  useEffect(() => moveSnakeHandler(), [moveSnakeHandler]);\n  useEffect(() => {\n    const interval = setInterval(() => {\n      if (currentDirection) {\n        dispatch({\n          type: \"MOVE\",\n          direction: currentDirection\n        });\n        dispatch({\n          type: \"EAT\"\n        });\n      }\n    }, state.speed);\n    return () => clearInterval(interval);\n  }, [currentDirection, state.moves, state.speed]);\n  useEffect(() => {}, [state.snake]);\n  return state;\n}","map":{"version":3,"sources":["/Users/qadam/Downloads/snake_game/src/hooks/use-snake.js"],"names":["useCallback","useReducer","useEffect","useState","EAST","INIT_STATE","NORTH","SOUTH","WEST","random_food","useKeyPress","targetKey","keyPressed","setKeyPressed","downHandler","key","upHandler","window","addEventListener","removeEventListener","useSnake","currentDirection","setCurrentDirection","wPress","sPress","aPress","dPress","snakeRedcuer","state","action","type","snake","coords","x","y","cols","rows","direction","unshift","end","i","length","has_collided","undefined","moves","apple","apple_x","apple_y","hasEatenFood","console","log","pop","dispatch","moveSnakeHandler","interval","setInterval","speed","clearInterval"],"mappings":"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","sourcesContent":["import { useCallback, useReducer, useEffect, useState } from \"react\";\nimport { EAST, INIT_STATE, NORTH, SOUTH, WEST } from \"../initialState.js\";\nimport { random_food } from \"../logic.js\";\n\nfunction useKeyPress(targetKey) {\n  // State for keeping track of whether key is pressed\n  const [keyPressed, setKeyPressed] = useState(false);\n  // If pressed key is our target key then set to true\n  const downHandler = useCallback(\n    ({ key }) => {\n      if (key === targetKey) {\n        setKeyPressed(true);\n      }\n    },\n    [targetKey]\n  );\n  // If released key is our target key then set to false\n  const upHandler = useCallback(\n    ({ key }) => {\n      if (key === targetKey) {\n        setKeyPressed(false);\n      }\n    },\n    [targetKey]\n  );\n  // Add event listeners\n  useEffect(() => {\n    window.addEventListener(\"keydown\", downHandler);\n    window.addEventListener(\"keyup\", upHandler);\n    // Remove event listeners on cleanup\n    return () => {\n      window.removeEventListener(\"keydown\", downHandler);\n      window.removeEventListener(\"keyup\", upHandler);\n    };\n  }, [downHandler, upHandler]); // Empty array ensures that effect is only run on mount and unmount\n  return keyPressed;\n}\n\nexport default function useSnake() {\n  const [currentDirection, setCurrentDirection] = useState();\n\n  const wPress = useKeyPress(\"w\");\n  const sPress = useKeyPress(\"s\");\n  const aPress = useKeyPress(\"a\");\n  const dPress = useKeyPress(\"d\");\n\n  const snakeRedcuer = (state, action) => {\n    switch (action.type) {\n      case \"MOVE\":\n        const snake = state.snake;\n        let coords = { x: snake[0].x, y: snake[0].y };\n\n        if (snake[0].x < 0) {\n          coords = { x: state.cols - 1, y: snake[0].y };\n        } else if (snake[0].x >= state.cols) {\n          coords = { x: 0, y: snake[0].y };\n        } else if (snake[0].y < 0) {\n          coords = { x: snake[0].x, y: state.rows - 1 };\n        } else if (snake[0].y >= state.rows) {\n          coords = { x: snake[0].x, y: 0 };\n        } else {\n          coords = {\n            x: state.snake[0].x + action.direction.x,\n            y: state.snake[0].y + action.direction.y,\n          };\n        }\n\n        snake.unshift(coords);\n\n        let end = false;\n        for (let i = 3; i < snake.length; i++) {\n          const has_collided =\n            snake[i].x === snake[0].x && snake[i].y === snake[0].y;\n          if (has_collided) end = true;\n        }\n        if (end) {\n          setCurrentDirection(undefined);\n          return {\n            ...state,\n            moves: [EAST],\n            snake: [{ x: 2, y: 2 }],\n            apple: { x: 16, y: 2 },\n          };\n        }\n\n        return {\n          ...state,\n          moves: [...state.moves, action.direction],\n          snake: snake,\n        };\n\n      case \"EAT\":\n        let apple_x = state.apple.x;\n        let apple_y = state.apple.y;\n\n        const hasEatenFood =\n          state.snake[0].x === apple_x && state.snake[0].y === apple_y;\n\n        if (hasEatenFood) {\n          const apple_x = random_food(0, state.cols - 1);\n          const apple_y = random_food(0, state.rows - 1);\n          console.log(apple_x, apple_y);\n          return {\n            ...state,\n            apple: { x: apple_x, y: apple_y },\n          };\n        } else if (state.snake.length > 1) {\n          const snake = state.snake;\n          snake.pop();\n          return {\n            ...state,\n            snake: snake,\n          };\n        }\n\n        return state;\n\n      case \"END_GAME\":\n        return INIT_STATE;\n      default:\n        break;\n    }\n  };\n\n  const [state, dispatch] = useReducer(snakeRedcuer, INIT_STATE);\n\n  const moveSnakeHandler = useCallback(() => {\n    switch (true) {\n      case wPress:\n        if (currentDirection !== NORTH && currentDirection !== SOUTH)\n          setCurrentDirection(NORTH);\n        break;\n      case sPress:\n        if (currentDirection !== SOUTH && currentDirection !== NORTH)\n          setCurrentDirection(SOUTH);\n        break;\n      case aPress:\n        if (currentDirection !== WEST && currentDirection !== EAST)\n          setCurrentDirection(WEST);\n        break;\n      case dPress:\n        if (currentDirection !== WEST && currentDirection !== EAST)\n          setCurrentDirection(EAST);\n        break;\n      default:\n        break;\n    }\n  }, [aPress, currentDirection, dPress, sPress, wPress]);\n\n  useEffect(() => moveSnakeHandler(), [moveSnakeHandler]);\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      if (currentDirection) {\n        dispatch({ type: \"MOVE\", direction: currentDirection });\n        dispatch({ type: \"EAT\" });\n      }\n    }, state.speed);\n\n    return () => clearInterval(interval);\n  }, [currentDirection, state.moves, state.speed]);\n\n  useEffect(() => {}, [state.snake]);\n\n  return state;\n}\n"]},"metadata":{},"sourceType":"module"}