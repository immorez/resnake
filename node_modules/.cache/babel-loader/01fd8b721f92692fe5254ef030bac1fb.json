{"ast":null,"code":"import { useCallback, useReducer, useEffect, useState } from \"react\";\nimport { EAST, INIT_STATE, NORTH, SOUTH, WEST } from \"../initialState.js\";\n\nfunction useKeyPress(targetKey) {\n  // State for keeping track of whether key is pressed\n  const [keyPressed, setKeyPressed] = useState(false); // If pressed key is our target key then set to true\n\n  const downHandler = useCallback(({\n    key\n  }) => {\n    if (key === targetKey) {\n      setKeyPressed(true);\n    }\n  }, [targetKey]); // If released key is our target key then set to false\n\n  const upHandler = useCallback(({\n    key\n  }) => {\n    if (key === targetKey) {\n      setKeyPressed(false);\n    }\n  }, [targetKey]); // Add event listeners\n\n  useEffect(() => {\n    window.addEventListener(\"keydown\", downHandler);\n    window.addEventListener(\"keyup\", upHandler); // Remove event listeners on cleanup\n\n    return () => {\n      window.removeEventListener(\"keydown\", downHandler);\n      window.removeEventListener(\"keyup\", upHandler);\n    };\n  }, [downHandler, upHandler]); // Empty array ensures that effect is only run on mount and unmount\n\n  return keyPressed;\n}\n\nexport default function useSnake() {\n  const [currentDirection, setCurrentDirection] = useState();\n  const wPress = useKeyPress(\"w\");\n  const sPress = useKeyPress(\"s\");\n  const aPress = useKeyPress(\"a\");\n  const dPress = useKeyPress(\"d\");\n\n  const snakeRedcuer = (state, action) => {\n    switch (action.type) {\n      case \"MOVE\":\n        return { ...state,\n          moves: [action.direction],\n          snake: [{\n            x: state.snake[0].x + action.direction.x,\n            y: state.snake[0].y + action.direction.y\n          }]\n        };\n\n      default:\n        break;\n    }\n  };\n\n  const [state, dispatch] = useReducer(snakeRedcuer, INIT_STATE);\n  const moveSnakeHandler = useCallback(() => {\n    switch (true) {\n      case wPress:\n        setCurrentDirection(NORTH);\n        break;\n\n      case sPress:\n        setCurrentDirection(SOUTH);\n        break;\n\n      case aPress:\n        setCurrentDirection(WEST);\n        break;\n\n      case dPress:\n        setCurrentDirection(EAST);\n        break;\n\n      default:\n        break;\n    }\n  }, [aPress, dPress, sPress, wPress]);\n  useEffect(() => moveSnakeHandler(), [moveSnakeHandler]);\n  useEffect(() => {\n    let interval;\n\n    if (currentDirection) {\n      interval = setInterval(() => {\n        dispatch({\n          type: \"MOVE\",\n          direction: currentDirection\n        });\n      }, state.speed);\n    }\n\n    return interval;\n  }, [currentDirection, state.speed]);\n  return state;\n}","map":{"version":3,"sources":["/Users/qadam/Downloads/snake_game/src/hooks/use-snake.js"],"names":["useCallback","useReducer","useEffect","useState","EAST","INIT_STATE","NORTH","SOUTH","WEST","useKeyPress","targetKey","keyPressed","setKeyPressed","downHandler","key","upHandler","window","addEventListener","removeEventListener","useSnake","currentDirection","setCurrentDirection","wPress","sPress","aPress","dPress","snakeRedcuer","state","action","type","moves","direction","snake","x","y","dispatch","moveSnakeHandler","interval","setInterval","speed"],"mappings":"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","sourcesContent":["import { useCallback, useReducer, useEffect, useState } from \"react\";\nimport { EAST, INIT_STATE, NORTH, SOUTH, WEST } from \"../initialState.js\";\n\nfunction useKeyPress(targetKey) {\n  // State for keeping track of whether key is pressed\n  const [keyPressed, setKeyPressed] = useState(false);\n  // If pressed key is our target key then set to true\n  const downHandler = useCallback(\n    ({ key }) => {\n      if (key === targetKey) {\n        setKeyPressed(true);\n      }\n    },\n    [targetKey]\n  );\n  // If released key is our target key then set to false\n  const upHandler = useCallback(\n    ({ key }) => {\n      if (key === targetKey) {\n        setKeyPressed(false);\n      }\n    },\n    [targetKey]\n  );\n  // Add event listeners\n  useEffect(() => {\n    window.addEventListener(\"keydown\", downHandler);\n    window.addEventListener(\"keyup\", upHandler);\n    // Remove event listeners on cleanup\n    return () => {\n      window.removeEventListener(\"keydown\", downHandler);\n      window.removeEventListener(\"keyup\", upHandler);\n    };\n  }, [downHandler, upHandler]); // Empty array ensures that effect is only run on mount and unmount\n  return keyPressed;\n}\n\nexport default function useSnake() {\n  const [currentDirection, setCurrentDirection] = useState();\n\n  const wPress = useKeyPress(\"w\");\n  const sPress = useKeyPress(\"s\");\n  const aPress = useKeyPress(\"a\");\n  const dPress = useKeyPress(\"d\");\n\n  const snakeRedcuer = (state, action) => {\n    switch (action.type) {\n      case \"MOVE\":\n        return {\n          ...state,\n          moves: [action.direction],\n          snake: [\n            {\n              x: state.snake[0].x + action.direction.x,\n              y: state.snake[0].y + action.direction.y,\n            },\n          ],\n        };\n      default:\n        break;\n    }\n  };\n\n  const [state, dispatch] = useReducer(snakeRedcuer, INIT_STATE);\n\n  const moveSnakeHandler = useCallback(() => {\n    switch (true) {\n      case wPress:\n        setCurrentDirection(NORTH);\n        break;\n      case sPress:\n        setCurrentDirection(SOUTH);\n        break;\n      case aPress:\n        setCurrentDirection(WEST);\n        break;\n      case dPress:\n        setCurrentDirection(EAST);\n        break;\n      default:\n        break;\n    }\n  }, [aPress, dPress, sPress, wPress]);\n\n  useEffect(() => moveSnakeHandler(), [moveSnakeHandler]);\n\n  useEffect(() => {\n    let interval;\n    if (currentDirection) {\n      interval = setInterval(() => {\n        dispatch({ type: \"MOVE\", direction: currentDirection });\n      }, state.speed);\n    }\n    return interval;\n  }, [currentDirection, state.speed]);\n\n  return state;\n}\n"]},"metadata":{},"sourceType":"module"}