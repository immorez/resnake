{"ast":null,"code":"import { useCallback, useReducer, useEffect, useState } from \"react\";\nimport { EAST, INIT_STATE, NORTH, SOUTH, WEST } from \"../initialState.js\";\n\nfunction useKeyPress(targetKey) {\n  // State for keeping track of whether key is pressed\n  const [keyPressed, setKeyPressed] = useState(false); // If pressed key is our target key then set to true\n\n  const downHandler = useCallback(({\n    key\n  }) => {\n    if (key === targetKey) {\n      setKeyPressed(true);\n    }\n  }, [targetKey]); // If released key is our target key then set to false\n\n  const upHandler = useCallback(({\n    key\n  }) => {\n    if (key === targetKey) {\n      setKeyPressed(false);\n    }\n  }, [targetKey]); // Add event listeners\n\n  useEffect(() => {\n    window.addEventListener(\"keydown\", downHandler);\n    window.addEventListener(\"keyup\", upHandler); // Remove event listeners on cleanup\n\n    return () => {\n      window.removeEventListener(\"keydown\", downHandler);\n      window.removeEventListener(\"keyup\", upHandler);\n    };\n  }, [downHandler, upHandler]); // Empty array ensures that effect is only run on mount and unmount\n\n  return keyPressed;\n}\n\nexport default function useSnake() {\n  const [currentDirection, setCurrentDirection] = useState();\n  const wPress = useKeyPress(\"w\");\n  const sPress = useKeyPress(\"s\");\n  const aPress = useKeyPress(\"a\");\n  const dPress = useKeyPress(\"d\");\n\n  const snakeRedcuer = (state, action) => {\n    switch (action.type) {\n      case \"MOVE\":\n        return { ...state,\n          moves: [...state.moves, action.direction],\n          snake: state.snake.map(s => {\n            return state.moves.map(m => {\n              return {\n                x: s.x + action.direction.x,\n                y: s.y + action.direction.y\n              };\n            });\n          })\n        };\n\n      case \"LOCATE\":\n        return { ...state,\n          snake: [{\n            x: action.x,\n            y: action.y\n          }]\n        };\n\n      default:\n        break;\n    }\n  };\n\n  const [state, dispatch] = useReducer(snakeRedcuer, INIT_STATE);\n  const moveSnakeHandler = useCallback(() => {\n    switch (true) {\n      case wPress:\n        setCurrentDirection(NORTH);\n        break;\n\n      case sPress:\n        setCurrentDirection(SOUTH);\n        break;\n\n      case aPress:\n        setCurrentDirection(WEST);\n        break;\n\n      case dPress:\n        setCurrentDirection(EAST);\n        break;\n\n      default:\n        break;\n    }\n  }, [aPress, dPress, sPress, wPress]);\n  useEffect(() => moveSnakeHandler(), [moveSnakeHandler]); // Reposition snake\n\n  useEffect(() => {\n    if (state.snake[0].x < 0) dispatch({\n      type: \"LOCATE\",\n      x: state.cols - 1,\n      y: state.snake[0].y\n    });\n    if (state.snake[0].y < 0) dispatch({\n      type: \"LOCATE\",\n      x: state.snake[0].x,\n      y: state.rows - 1\n    });\n    if (state.snake[0].x > state.cols - 1) dispatch({\n      type: \"LOCATE\",\n      x: 0,\n      y: state.snake[0].y\n    });\n    if (state.snake[0].y > state.rows - 1) dispatch({\n      type: \"LOCATE\",\n      x: state.snake[0].x,\n      y: 0\n    });\n  }, [state.cols, state.rows, state.snake]);\n  useEffect(() => {\n    const interval = setInterval(() => {\n      if (currentDirection && state.moves[state.moves.length - 1] !== currentDirection) {\n        dispatch({\n          type: \"MOVE\",\n          direction: currentDirection\n        });\n      }\n    }, state.speed);\n    return () => clearInterval(interval);\n  }, [currentDirection, state.moves, state.speed]);\n  console.log(state);\n  return state;\n}","map":{"version":3,"sources":["/Users/qadam/Downloads/snake_game/src/hooks/use-snake.js"],"names":["useCallback","useReducer","useEffect","useState","EAST","INIT_STATE","NORTH","SOUTH","WEST","useKeyPress","targetKey","keyPressed","setKeyPressed","downHandler","key","upHandler","window","addEventListener","removeEventListener","useSnake","currentDirection","setCurrentDirection","wPress","sPress","aPress","dPress","snakeRedcuer","state","action","type","moves","direction","snake","map","s","m","x","y","dispatch","moveSnakeHandler","cols","rows","interval","setInterval","length","speed","clearInterval","console","log"],"mappings":"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","sourcesContent":["import { useCallback, useReducer, useEffect, useState } from \"react\";\nimport { EAST, INIT_STATE, NORTH, SOUTH, WEST } from \"../initialState.js\";\n\nfunction useKeyPress(targetKey) {\n  // State for keeping track of whether key is pressed\n  const [keyPressed, setKeyPressed] = useState(false);\n  // If pressed key is our target key then set to true\n  const downHandler = useCallback(\n    ({ key }) => {\n      if (key === targetKey) {\n        setKeyPressed(true);\n      }\n    },\n    [targetKey]\n  );\n  // If released key is our target key then set to false\n  const upHandler = useCallback(\n    ({ key }) => {\n      if (key === targetKey) {\n        setKeyPressed(false);\n      }\n    },\n    [targetKey]\n  );\n  // Add event listeners\n  useEffect(() => {\n    window.addEventListener(\"keydown\", downHandler);\n    window.addEventListener(\"keyup\", upHandler);\n    // Remove event listeners on cleanup\n    return () => {\n      window.removeEventListener(\"keydown\", downHandler);\n      window.removeEventListener(\"keyup\", upHandler);\n    };\n  }, [downHandler, upHandler]); // Empty array ensures that effect is only run on mount and unmount\n  return keyPressed;\n}\n\nexport default function useSnake() {\n  const [currentDirection, setCurrentDirection] = useState();\n\n  const wPress = useKeyPress(\"w\");\n  const sPress = useKeyPress(\"s\");\n  const aPress = useKeyPress(\"a\");\n  const dPress = useKeyPress(\"d\");\n\n  const snakeRedcuer = (state, action) => {\n    switch (action.type) {\n      case \"MOVE\":\n        return {\n          ...state,\n          moves: [...state.moves, action.direction],\n          snake: state.snake.map((s) => {\n            return state.moves.map((m) => {\n              return {\n                x: s.x + action.direction.x,\n                y: s.y + action.direction.y,\n              };\n            });\n          }),\n        };\n      case \"LOCATE\":\n        return {\n          ...state,\n          snake: [\n            {\n              x: action.x,\n              y: action.y,\n            },\n          ],\n        };\n      default:\n        break;\n    }\n  };\n\n  const [state, dispatch] = useReducer(snakeRedcuer, INIT_STATE);\n\n  const moveSnakeHandler = useCallback(() => {\n    switch (true) {\n      case wPress:\n        setCurrentDirection(NORTH);\n        break;\n      case sPress:\n        setCurrentDirection(SOUTH);\n        break;\n      case aPress:\n        setCurrentDirection(WEST);\n        break;\n      case dPress:\n        setCurrentDirection(EAST);\n        break;\n      default:\n        break;\n    }\n  }, [aPress, dPress, sPress, wPress]);\n\n  useEffect(() => moveSnakeHandler(), [moveSnakeHandler]);\n\n  // Reposition snake\n  useEffect(() => {\n    if (state.snake[0].x < 0)\n      dispatch({ type: \"LOCATE\", x: state.cols - 1, y: state.snake[0].y });\n\n    if (state.snake[0].y < 0)\n      dispatch({ type: \"LOCATE\", x: state.snake[0].x, y: state.rows - 1 });\n\n    if (state.snake[0].x > state.cols - 1)\n      dispatch({ type: \"LOCATE\", x: 0, y: state.snake[0].y });\n\n    if (state.snake[0].y > state.rows - 1)\n      dispatch({ type: \"LOCATE\", x: state.snake[0].x, y: 0 });\n  }, [state.cols, state.rows, state.snake]);\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      if (\n        currentDirection &&\n        state.moves[state.moves.length - 1] !== currentDirection\n      ) {\n        dispatch({ type: \"MOVE\", direction: currentDirection });\n      }\n    }, state.speed);\n\n    return () => clearInterval(interval);\n  }, [currentDirection, state.moves, state.speed]);\n\n  console.log(state);\n  return state;\n}\n"]},"metadata":{},"sourceType":"module"}