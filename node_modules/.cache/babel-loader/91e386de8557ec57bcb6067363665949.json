{"ast":null,"code":"import { useCallback, useReducer, useEffect, useState, useMemo } from \"react\";\nimport { EAST, INIT_STATE, NORTH, SOUTH, WEST } from \"../initialState.js\";\nimport { random_food } from \"../logic.js\";\n\nfunction useKeyPress(targetKey) {\n  // State for keeping track of whether key is pressed\n  const [keyPressed, setKeyPressed] = useState(false); // If pressed key is our target key then set to true\n\n  const downHandler = useCallback(({\n    key\n  }) => {\n    if (key === targetKey) {\n      setKeyPressed(true);\n    }\n  }, [targetKey]); // If released key is our target key then set to false\n\n  const upHandler = useCallback(({\n    key\n  }) => {\n    if (key === targetKey) {\n      setKeyPressed(false);\n    }\n  }, [targetKey]); // Add event listeners\n\n  useEffect(() => {\n    window.addEventListener(\"keydown\", downHandler);\n    window.addEventListener(\"keyup\", upHandler); // Remove event listeners on cleanup\n\n    return () => {\n      window.removeEventListener(\"keydown\", downHandler);\n      window.removeEventListener(\"keyup\", upHandler);\n    };\n  }, [downHandler, upHandler]); // Empty array ensures that effect is only run on mount and unmount\n\n  return keyPressed;\n}\n\nexport default function useSnake() {\n  const [currentDirection, setCurrentDirection] = useState();\n  const wPress = useKeyPress(\"w\");\n  const sPress = useKeyPress(\"s\");\n  const aPress = useKeyPress(\"a\");\n  const dPress = useKeyPress(\"d\");\n\n  const snakeRedcuer = (state, action) => {\n    switch (action.type) {\n      case \"MOVE\":\n        const snake = state.snake;\n        const apple = state.apple;\n        snake.unshift({\n          x: state.snake[0].x + action.direction.x,\n          y: state.snake[0].y + action.direction.y\n        });\n        return { ...state,\n          moves: [...state.moves, action.direction],\n          snake: snake\n        };\n\n      case \"LOCATE\":\n        return { ...state,\n          snake: [...state.snake.slice(-1), {\n            x: action.x,\n            y: action.y\n          }]\n        };\n\n      case \"EAT\":\n        let apple_x = state.apple.x;\n        let apple_y = state.apple.y;\n        const head = state.snake[0];\n        const hasEatenFood = state.snake[0].x === state.apple.x && state.snake[0].y === state.apple.y;\n\n        if (hasEatenFood) {\n          apple_x = random_food(0, state.board.width / state.cols);\n          apple_y = random_food(0, state.board.height / state.rows);\n        } else {\n          snake.pop();\n        }\n\n        return { ...state,\n          snake: [...state.snake, {\n            x: head.x + action.direction.x,\n            y: head.y + action.direction.y\n          }]\n        };\n\n      default:\n        break;\n    }\n  };\n\n  const [state, dispatch] = useReducer(snakeRedcuer, INIT_STATE);\n  const moveSnakeHandler = useCallback(() => {\n    switch (true) {\n      case wPress:\n        setCurrentDirection(NORTH);\n        break;\n\n      case sPress:\n        setCurrentDirection(SOUTH);\n        break;\n\n      case aPress:\n        setCurrentDirection(WEST);\n        break;\n\n      case dPress:\n        setCurrentDirection(EAST);\n        break;\n\n      default:\n        break;\n    }\n  }, [aPress, dPress, sPress, wPress]);\n  useEffect(() => moveSnakeHandler(), [moveSnakeHandler]); // Reposition snake\n\n  useEffect(() => {\n    if (state.snake[0].x < 0) dispatch({\n      type: \"LOCATE\",\n      x: state.cols - 1,\n      y: state.snake[0].y\n    });\n    if (state.snake[0].y < 0) dispatch({\n      type: \"LOCATE\",\n      x: state.snake[0].x,\n      y: state.rows - 1\n    });\n    if (state.snake[0].x > state.cols - 1) dispatch({\n      type: \"LOCATE\",\n      x: 0,\n      y: state.snake[0].y\n    });\n    if (state.snake[0].y > state.rows - 1) dispatch({\n      type: \"LOCATE\",\n      x: state.snake[0].x,\n      y: 0\n    });\n  }, [state.cols, state.rows, state.snake]);\n  useEffect(() => {\n    const interval = setInterval(() => {\n      if (currentDirection) {\n        dispatch({\n          type: \"MOVE\",\n          direction: currentDirection\n        });\n      }\n    }, state.speed);\n    return () => clearInterval(interval);\n  }, [currentDirection, state.speed]);\n  useEffect(() => {\n    if (currentDirection) {\n      dispatch({\n        type: \"EAT\",\n        direction: currentDirection\n      });\n    }\n  }, [currentDirection]);\n  console.log(state);\n  return state;\n}","map":{"version":3,"sources":["/Users/qadam/Downloads/snake_game/src/hooks/use-snake.js"],"names":["useCallback","useReducer","useEffect","useState","useMemo","EAST","INIT_STATE","NORTH","SOUTH","WEST","random_food","useKeyPress","targetKey","keyPressed","setKeyPressed","downHandler","key","upHandler","window","addEventListener","removeEventListener","useSnake","currentDirection","setCurrentDirection","wPress","sPress","aPress","dPress","snakeRedcuer","state","action","type","snake","apple","unshift","x","direction","y","moves","slice","apple_x","apple_y","head","hasEatenFood","board","width","cols","height","rows","pop","dispatch","moveSnakeHandler","interval","setInterval","speed","clearInterval","console","log"],"mappings":"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","sourcesContent":["import { useCallback, useReducer, useEffect, useState, useMemo } from \"react\";\nimport { EAST, INIT_STATE, NORTH, SOUTH, WEST } from \"../initialState.js\";\nimport { random_food } from \"../logic.js\";\n\nfunction useKeyPress(targetKey) {\n  // State for keeping track of whether key is pressed\n  const [keyPressed, setKeyPressed] = useState(false);\n  // If pressed key is our target key then set to true\n  const downHandler = useCallback(\n    ({ key }) => {\n      if (key === targetKey) {\n        setKeyPressed(true);\n      }\n    },\n    [targetKey]\n  );\n  // If released key is our target key then set to false\n  const upHandler = useCallback(\n    ({ key }) => {\n      if (key === targetKey) {\n        setKeyPressed(false);\n      }\n    },\n    [targetKey]\n  );\n  // Add event listeners\n  useEffect(() => {\n    window.addEventListener(\"keydown\", downHandler);\n    window.addEventListener(\"keyup\", upHandler);\n    // Remove event listeners on cleanup\n    return () => {\n      window.removeEventListener(\"keydown\", downHandler);\n      window.removeEventListener(\"keyup\", upHandler);\n    };\n  }, [downHandler, upHandler]); // Empty array ensures that effect is only run on mount and unmount\n  return keyPressed;\n}\n\nexport default function useSnake() {\n  const [currentDirection, setCurrentDirection] = useState();\n\n  const wPress = useKeyPress(\"w\");\n  const sPress = useKeyPress(\"s\");\n  const aPress = useKeyPress(\"a\");\n  const dPress = useKeyPress(\"d\");\n\n  const snakeRedcuer = (state, action) => {\n    switch (action.type) {\n      case \"MOVE\":\n        const snake = state.snake;\n        const apple = state.apple;\n\n        snake.unshift({\n          x: state.snake[0].x + action.direction.x,\n          y: state.snake[0].y + action.direction.y,\n        });\n\n        return {\n          ...state,\n          moves: [...state.moves, action.direction],\n          snake: snake,\n        };\n      case \"LOCATE\":\n        return {\n          ...state,\n          snake: [\n            ...state.snake.slice(-1),\n            {\n              x: action.x,\n              y: action.y,\n            },\n          ],\n        };\n      case \"EAT\":\n        let apple_x = state.apple.x;\n        let apple_y = state.apple.y;\n\n        const head = state.snake[0];\n        const hasEatenFood =\n          state.snake[0].x === state.apple.x &&\n          state.snake[0].y === state.apple.y;\n\n        if (hasEatenFood) {\n          apple_x = random_food(0, state.board.width / state.cols);\n          apple_y = random_food(0, state.board.height / state.rows);\n        } else {\n          snake.pop();\n        }\n\n        return {\n          ...state,\n          snake: [\n            ...state.snake,\n            {\n              x: head.x + action.direction.x,\n              y: head.y + action.direction.y,\n            },\n          ],\n        };\n\n      default:\n        break;\n    }\n  };\n\n  const [state, dispatch] = useReducer(snakeRedcuer, INIT_STATE);\n\n  const moveSnakeHandler = useCallback(() => {\n    switch (true) {\n      case wPress:\n        setCurrentDirection(NORTH);\n        break;\n      case sPress:\n        setCurrentDirection(SOUTH);\n        break;\n      case aPress:\n        setCurrentDirection(WEST);\n        break;\n      case dPress:\n        setCurrentDirection(EAST);\n        break;\n      default:\n        break;\n    }\n  }, [aPress, dPress, sPress, wPress]);\n\n  useEffect(() => moveSnakeHandler(), [moveSnakeHandler]);\n\n  // Reposition snake\n  useEffect(() => {\n    if (state.snake[0].x < 0)\n      dispatch({ type: \"LOCATE\", x: state.cols - 1, y: state.snake[0].y });\n\n    if (state.snake[0].y < 0)\n      dispatch({ type: \"LOCATE\", x: state.snake[0].x, y: state.rows - 1 });\n\n    if (state.snake[0].x > state.cols - 1)\n      dispatch({ type: \"LOCATE\", x: 0, y: state.snake[0].y });\n\n    if (state.snake[0].y > state.rows - 1)\n      dispatch({ type: \"LOCATE\", x: state.snake[0].x, y: 0 });\n  }, [state.cols, state.rows, state.snake]);\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      if (currentDirection) {\n        dispatch({ type: \"MOVE\", direction: currentDirection });\n      }\n    }, state.speed);\n\n    return () => clearInterval(interval);\n  }, [currentDirection, state.speed]);\n\n  useEffect(() => {\n    if (currentDirection) {\n      dispatch({ type: \"EAT\", direction: currentDirection });\n    }\n  }, [currentDirection]);\n\n  console.log(state);\n  return state;\n}\n"]},"metadata":{},"sourceType":"module"}