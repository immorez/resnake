{"ast":null,"code":"import { useCallback, useReducer, useEffect, useState } from \"react\";\nimport { EAST, INIT_STATE, NORTH, SOUTH, WEST } from \"../initialState.js\";\n\nfunction useKeyPress(targetKey) {\n  // State for keeping track of whether key is pressed\n  const [keyPressed, setKeyPressed] = useState(false); // If pressed key is our target key then set to true\n\n  const downHandler = useCallback(({\n    key\n  }) => {\n    if (key === targetKey) {\n      setKeyPressed(true);\n    }\n  }, [targetKey]); // If released key is our target key then set to false\n\n  const upHandler = useCallback(({\n    key\n  }) => {\n    if (key === targetKey) {\n      setKeyPressed(false);\n    }\n  }, [targetKey]); // Add event listeners\n\n  useEffect(() => {\n    window.addEventListener(\"keydown\", downHandler);\n    window.addEventListener(\"keyup\", upHandler); // Remove event listeners on cleanup\n\n    return () => {\n      window.removeEventListener(\"keydown\", downHandler);\n      window.removeEventListener(\"keyup\", upHandler);\n    };\n  }, [downHandler, upHandler]); // Empty array ensures that effect is only run on mount and unmount\n\n  return keyPressed;\n}\n\nexport default function useSnake() {\n  const wPress = useKeyPress(\"w\");\n  const sPress = useKeyPress(\"s\");\n  const aPress = useKeyPress(\"a\");\n  const dPress = useKeyPress(\"d\");\n\n  const snakeRedcuer = (state, action) => {\n    switch (action.type) {\n      case \"MOVE\":\n        if (state.moves[state.moves.length - 1] !== action.direction) {\n          return { ...state,\n            moves: [...state.moves, action.direction],\n            snake: [...state.snake, {\n              x: state.snake[state.snake.length - 1].x + action.direction.x,\n              y: state.snake[state.snake.length - 1].y + action.direction.y\n            }]\n          };\n        }\n\n        return state;\n\n      default:\n        break;\n    }\n  };\n\n  const [state, dispatch] = useReducer(snakeRedcuer, INIT_STATE);\n  const moveSnakeHandler = useCallback(() => {\n    switch (true) {\n      case wPress:\n        dispatch({\n          type: \"MOVE\",\n          direction: NORTH\n        });\n        console.log(\"w\");\n        break;\n\n      case sPress:\n        dispatch({\n          type: \"MOVE\",\n          direction: SOUTH\n        });\n        console.log(\"s\");\n        break;\n\n      case aPress:\n        dispatch({\n          type: \"MOVE\",\n          direction: WEST\n        });\n        console.log(\"a\");\n        break;\n\n      case dPress:\n        dispatch({\n          type: \"MOVE\",\n          direction: EAST\n        });\n        console.log(\"d\");\n        break;\n\n      default:\n        break;\n    }\n  }, [aPress, dPress, sPress, wPress]);\n  useEffect(() => moveSnakeHandler(), [moveSnakeHandler]);\n  useEffect(() => {\n    console.log(state);\n  }, [state]);\n  return state;\n}","map":{"version":3,"sources":["/Users/qadam/Downloads/snake_game/src/hooks/use-snake.js"],"names":["useCallback","useReducer","useEffect","useState","EAST","INIT_STATE","NORTH","SOUTH","WEST","useKeyPress","targetKey","keyPressed","setKeyPressed","downHandler","key","upHandler","window","addEventListener","removeEventListener","useSnake","wPress","sPress","aPress","dPress","snakeRedcuer","state","action","type","moves","length","direction","snake","x","y","dispatch","moveSnakeHandler","console","log"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,UAAtB,EAAkCC,SAAlC,EAA6CC,QAA7C,QAA6D,OAA7D;AACA,SAASC,IAAT,EAAeC,UAAf,EAA2BC,KAA3B,EAAkCC,KAAlC,EAAyCC,IAAzC,QAAqD,oBAArD;;AAEA,SAASC,WAAT,CAAqBC,SAArB,EAAgC;AAC9B;AACA,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BT,QAAQ,CAAC,KAAD,CAA5C,CAF8B,CAG9B;;AACA,QAAMU,WAAW,GAAGb,WAAW,CAC7B,CAAC;AAAEc,IAAAA;AAAF,GAAD,KAAa;AACX,QAAIA,GAAG,KAAKJ,SAAZ,EAAuB;AACrBE,MAAAA,aAAa,CAAC,IAAD,CAAb;AACD;AACF,GAL4B,EAM7B,CAACF,SAAD,CAN6B,CAA/B,CAJ8B,CAY9B;;AACA,QAAMK,SAAS,GAAGf,WAAW,CAC3B,CAAC;AAAEc,IAAAA;AAAF,GAAD,KAAa;AACX,QAAIA,GAAG,KAAKJ,SAAZ,EAAuB;AACrBE,MAAAA,aAAa,CAAC,KAAD,CAAb;AACD;AACF,GAL0B,EAM3B,CAACF,SAAD,CAN2B,CAA7B,CAb8B,CAqB9B;;AACAR,EAAAA,SAAS,CAAC,MAAM;AACdc,IAAAA,MAAM,CAACC,gBAAP,CAAwB,SAAxB,EAAmCJ,WAAnC;AACAG,IAAAA,MAAM,CAACC,gBAAP,CAAwB,OAAxB,EAAiCF,SAAjC,EAFc,CAGd;;AACA,WAAO,MAAM;AACXC,MAAAA,MAAM,CAACE,mBAAP,CAA2B,SAA3B,EAAsCL,WAAtC;AACAG,MAAAA,MAAM,CAACE,mBAAP,CAA2B,OAA3B,EAAoCH,SAApC;AACD,KAHD;AAID,GARQ,EAQN,CAACF,WAAD,EAAcE,SAAd,CARM,CAAT,CAtB8B,CA8BA;;AAC9B,SAAOJ,UAAP;AACD;;AAED,eAAe,SAASQ,QAAT,GAAoB;AACjC,QAAMC,MAAM,GAAGX,WAAW,CAAC,GAAD,CAA1B;AACA,QAAMY,MAAM,GAAGZ,WAAW,CAAC,GAAD,CAA1B;AACA,QAAMa,MAAM,GAAGb,WAAW,CAAC,GAAD,CAA1B;AACA,QAAMc,MAAM,GAAGd,WAAW,CAAC,GAAD,CAA1B;;AAEA,QAAMe,YAAY,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACtC,YAAQA,MAAM,CAACC,IAAf;AACE,WAAK,MAAL;AACE,YAAIF,KAAK,CAACG,KAAN,CAAYH,KAAK,CAACG,KAAN,CAAYC,MAAZ,GAAqB,CAAjC,MAAwCH,MAAM,CAACI,SAAnD,EAA8D;AAC5D,iBAAO,EACL,GAAGL,KADE;AAELG,YAAAA,KAAK,EAAE,CAAC,GAAGH,KAAK,CAACG,KAAV,EAAiBF,MAAM,CAACI,SAAxB,CAFF;AAGLC,YAAAA,KAAK,EAAE,CACL,GAAGN,KAAK,CAACM,KADJ,EAEL;AACEC,cAAAA,CAAC,EAAEP,KAAK,CAACM,KAAN,CAAYN,KAAK,CAACM,KAAN,CAAYF,MAAZ,GAAqB,CAAjC,EAAoCG,CAApC,GAAwCN,MAAM,CAACI,SAAP,CAAiBE,CAD9D;AAEEC,cAAAA,CAAC,EAAER,KAAK,CAACM,KAAN,CAAYN,KAAK,CAACM,KAAN,CAAYF,MAAZ,GAAqB,CAAjC,EAAoCI,CAApC,GAAwCP,MAAM,CAACI,SAAP,CAAiBG;AAF9D,aAFK;AAHF,WAAP;AAWD;;AACD,eAAOR,KAAP;;AAEF;AACE;AAlBJ;AAoBD,GArBD;;AAuBA,QAAM,CAACA,KAAD,EAAQS,QAAR,IAAoBjC,UAAU,CAACuB,YAAD,EAAenB,UAAf,CAApC;AAEA,QAAM8B,gBAAgB,GAAGnC,WAAW,CAAC,MAAM;AACzC,YAAQ,IAAR;AACE,WAAKoB,MAAL;AACEc,QAAAA,QAAQ,CAAC;AAAEP,UAAAA,IAAI,EAAE,MAAR;AAAgBG,UAAAA,SAAS,EAAExB;AAA3B,SAAD,CAAR;AACA8B,QAAAA,OAAO,CAACC,GAAR,CAAY,GAAZ;AACA;;AACF,WAAKhB,MAAL;AACEa,QAAAA,QAAQ,CAAC;AAAEP,UAAAA,IAAI,EAAE,MAAR;AAAgBG,UAAAA,SAAS,EAAEvB;AAA3B,SAAD,CAAR;AACA6B,QAAAA,OAAO,CAACC,GAAR,CAAY,GAAZ;AACA;;AACF,WAAKf,MAAL;AACEY,QAAAA,QAAQ,CAAC;AAAEP,UAAAA,IAAI,EAAE,MAAR;AAAgBG,UAAAA,SAAS,EAAEtB;AAA3B,SAAD,CAAR;AACA4B,QAAAA,OAAO,CAACC,GAAR,CAAY,GAAZ;AACA;;AACF,WAAKd,MAAL;AACEW,QAAAA,QAAQ,CAAC;AAAEP,UAAAA,IAAI,EAAE,MAAR;AAAgBG,UAAAA,SAAS,EAAE1B;AAA3B,SAAD,CAAR;AACAgC,QAAAA,OAAO,CAACC,GAAR,CAAY,GAAZ;AACA;;AACF;AACE;AAlBJ;AAoBD,GArBmC,EAqBjC,CAACf,MAAD,EAASC,MAAT,EAAiBF,MAAjB,EAAyBD,MAAzB,CArBiC,CAApC;AAuBAlB,EAAAA,SAAS,CAAC,MAAMiC,gBAAgB,EAAvB,EAA2B,CAACA,gBAAD,CAA3B,CAAT;AAEAjC,EAAAA,SAAS,CAAC,MAAM;AACdkC,IAAAA,OAAO,CAACC,GAAR,CAAYZ,KAAZ;AACD,GAFQ,EAEN,CAACA,KAAD,CAFM,CAAT;AAIA,SAAOA,KAAP;AACD","sourcesContent":["import { useCallback, useReducer, useEffect, useState } from \"react\";\nimport { EAST, INIT_STATE, NORTH, SOUTH, WEST } from \"../initialState.js\";\n\nfunction useKeyPress(targetKey) {\n  // State for keeping track of whether key is pressed\n  const [keyPressed, setKeyPressed] = useState(false);\n  // If pressed key is our target key then set to true\n  const downHandler = useCallback(\n    ({ key }) => {\n      if (key === targetKey) {\n        setKeyPressed(true);\n      }\n    },\n    [targetKey]\n  );\n  // If released key is our target key then set to false\n  const upHandler = useCallback(\n    ({ key }) => {\n      if (key === targetKey) {\n        setKeyPressed(false);\n      }\n    },\n    [targetKey]\n  );\n  // Add event listeners\n  useEffect(() => {\n    window.addEventListener(\"keydown\", downHandler);\n    window.addEventListener(\"keyup\", upHandler);\n    // Remove event listeners on cleanup\n    return () => {\n      window.removeEventListener(\"keydown\", downHandler);\n      window.removeEventListener(\"keyup\", upHandler);\n    };\n  }, [downHandler, upHandler]); // Empty array ensures that effect is only run on mount and unmount\n  return keyPressed;\n}\n\nexport default function useSnake() {\n  const wPress = useKeyPress(\"w\");\n  const sPress = useKeyPress(\"s\");\n  const aPress = useKeyPress(\"a\");\n  const dPress = useKeyPress(\"d\");\n\n  const snakeRedcuer = (state, action) => {\n    switch (action.type) {\n      case \"MOVE\":\n        if (state.moves[state.moves.length - 1] !== action.direction) {\n          return {\n            ...state,\n            moves: [...state.moves, action.direction],\n            snake: [\n              ...state.snake,\n              {\n                x: state.snake[state.snake.length - 1].x + action.direction.x,\n                y: state.snake[state.snake.length - 1].y + action.direction.y,\n              },\n            ],\n          };\n        }\n        return state;\n\n      default:\n        break;\n    }\n  };\n\n  const [state, dispatch] = useReducer(snakeRedcuer, INIT_STATE);\n\n  const moveSnakeHandler = useCallback(() => {\n    switch (true) {\n      case wPress:\n        dispatch({ type: \"MOVE\", direction: NORTH });\n        console.log(\"w\");\n        break;\n      case sPress:\n        dispatch({ type: \"MOVE\", direction: SOUTH });\n        console.log(\"s\");\n        break;\n      case aPress:\n        dispatch({ type: \"MOVE\", direction: WEST });\n        console.log(\"a\");\n        break;\n      case dPress:\n        dispatch({ type: \"MOVE\", direction: EAST });\n        console.log(\"d\");\n        break;\n      default:\n        break;\n    }\n  }, [aPress, dPress, sPress, wPress]);\n\n  useEffect(() => moveSnakeHandler(), [moveSnakeHandler]);\n\n  useEffect(() => {\n    console.log(state);\n  }, [state]);\n\n  return state;\n}\n"]},"metadata":{},"sourceType":"module"}