{"ast":null,"code":"import { useCallback, useReducer, useEffect, useState, useMemo } from \"react\";\nimport { EAST, INIT_STATE, NORTH, SOUTH, WEST } from \"../initialState.js\";\nimport { random_food } from \"../logic.js\";\n\nfunction useKeyPress(targetKey) {\n  // State for keeping track of whether key is pressed\n  const [keyPressed, setKeyPressed] = useState(false); // If pressed key is our target key then set to true\n\n  const downHandler = useCallback(({\n    key\n  }) => {\n    if (key === targetKey) {\n      setKeyPressed(true);\n    }\n  }, [targetKey]); // If released key is our target key then set to false\n\n  const upHandler = useCallback(({\n    key\n  }) => {\n    if (key === targetKey) {\n      setKeyPressed(false);\n    }\n  }, [targetKey]); // Add event listeners\n\n  useEffect(() => {\n    window.addEventListener(\"keydown\", downHandler);\n    window.addEventListener(\"keyup\", upHandler); // Remove event listeners on cleanup\n\n    return () => {\n      window.removeEventListener(\"keydown\", downHandler);\n      window.removeEventListener(\"keyup\", upHandler);\n    };\n  }, [downHandler, upHandler]); // Empty array ensures that effect is only run on mount and unmount\n\n  return keyPressed;\n}\n\nexport default function useSnake() {\n  const [currentDirection, setCurrentDirection] = useState();\n  const wPress = useKeyPress(\"w\");\n  const sPress = useKeyPress(\"s\");\n  const aPress = useKeyPress(\"a\");\n  const dPress = useKeyPress(\"d\");\n\n  const snakeRedcuer = (state, action) => {\n    switch (action.type) {\n      case \"MOVE\":\n        const snake = state.snake;\n        snake.unshift({\n          x: state.snake[0].x + action.direction.x,\n          y: state.snake[0].y + action.direction.y\n        });\n        return { ...state,\n          moves: [...state.moves, action.direction],\n          snake: snake\n        };\n\n      case \"LOCATE\":\n        const snakeLocator = state.snake.unshift({\n          x: action.x,\n          y: action.y\n        });\n        console.log(\"kir\");\n        return { ...state,\n          snake: snakeLocator\n        };\n\n      case \"EAT\":\n        let apple_x = state.apple.x;\n        let apple_y = state.apple.y;\n        const hasEatenFood = state.snake[0].x === apple_x && state.snake[0].y === apple_y;\n\n        if (hasEatenFood) {\n          const apple_x = random_food(0, state.cols - 1);\n          const apple_y = random_food(0, state.rows - 1);\n          console.log(apple_x, apple_y);\n          return { ...state,\n            apple: {\n              x: apple_x,\n              y: apple_y\n            }\n          };\n        } else if (state.snake.length > 1) {\n          const snake = state.snake;\n          snake.pop();\n          return { ...state,\n            snake: snake\n          };\n        }\n\n        return state;\n\n      default:\n        break;\n    }\n  };\n\n  const [state, dispatch] = useReducer(snakeRedcuer, INIT_STATE);\n  const moveSnakeHandler = useCallback(() => {\n    switch (true) {\n      case wPress:\n        if (currentDirection !== NORTH && currentDirection !== SOUTH) setCurrentDirection(NORTH);\n        break;\n\n      case sPress:\n        if (currentDirection !== SOUTH && currentDirection !== NORTH) setCurrentDirection(SOUTH);\n        break;\n\n      case aPress:\n        if (currentDirection !== WEST && currentDirection !== EAST) setCurrentDirection(WEST);\n        break;\n\n      case dPress:\n        if (currentDirection !== WEST && currentDirection !== EAST) setCurrentDirection(EAST);\n        break;\n\n      default:\n        break;\n    }\n  }, [aPress, currentDirection, dPress, sPress, wPress]);\n  useEffect(() => moveSnakeHandler(), [moveSnakeHandler]); // Reposition snake\n\n  useEffect(() => {\n    for (var i = 0; i < state.snake.length; i++) {\n      if (state.snake[i].x < 0) dispatch({\n        type: \"LOCATE\",\n        x: state.cols - 1,\n        y: state.snake[i].y\n      });\n      if (state.snake[i].y < 0) dispatch({\n        type: \"LOCATE\",\n        x: state.snake[i].x,\n        y: state.rows - 1\n      });\n      if (state.snake[i].x > state.cols - 1) dispatch({\n        type: \"LOCATE\",\n        x: 0,\n        y: state.snake[i].y\n      });\n      if (state.snake[i].y > state.rows - 1) dispatch({\n        type: \"LOCATE\",\n        x: state.snake[i].x,\n        y: 0\n      });\n    }\n  }, [state.cols, state.rows, state.snake]);\n  useEffect(() => {\n    const interval = setInterval(() => {\n      if (currentDirection) {\n        dispatch({\n          type: \"MOVE\",\n          direction: currentDirection\n        });\n        dispatch({\n          type: \"EAT\"\n        });\n      }\n    }, state.speed);\n    return () => clearInterval(interval);\n  }, [currentDirection, state.moves, state.speed]);\n  return state;\n}","map":{"version":3,"sources":["/Users/qadam/Downloads/snake_game/src/hooks/use-snake.js"],"names":["useCallback","useReducer","useEffect","useState","useMemo","EAST","INIT_STATE","NORTH","SOUTH","WEST","random_food","useKeyPress","targetKey","keyPressed","setKeyPressed","downHandler","key","upHandler","window","addEventListener","removeEventListener","useSnake","currentDirection","setCurrentDirection","wPress","sPress","aPress","dPress","snakeRedcuer","state","action","type","snake","unshift","x","direction","y","moves","snakeLocator","console","log","apple_x","apple","apple_y","hasEatenFood","cols","rows","length","pop","dispatch","moveSnakeHandler","i","interval","setInterval","speed","clearInterval"],"mappings":"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","sourcesContent":["import { useCallback, useReducer, useEffect, useState, useMemo } from \"react\";\nimport { EAST, INIT_STATE, NORTH, SOUTH, WEST } from \"../initialState.js\";\nimport { random_food } from \"../logic.js\";\n\nfunction useKeyPress(targetKey) {\n  // State for keeping track of whether key is pressed\n  const [keyPressed, setKeyPressed] = useState(false);\n  // If pressed key is our target key then set to true\n  const downHandler = useCallback(\n    ({ key }) => {\n      if (key === targetKey) {\n        setKeyPressed(true);\n      }\n    },\n    [targetKey]\n  );\n  // If released key is our target key then set to false\n  const upHandler = useCallback(\n    ({ key }) => {\n      if (key === targetKey) {\n        setKeyPressed(false);\n      }\n    },\n    [targetKey]\n  );\n  // Add event listeners\n  useEffect(() => {\n    window.addEventListener(\"keydown\", downHandler);\n    window.addEventListener(\"keyup\", upHandler);\n    // Remove event listeners on cleanup\n    return () => {\n      window.removeEventListener(\"keydown\", downHandler);\n      window.removeEventListener(\"keyup\", upHandler);\n    };\n  }, [downHandler, upHandler]); // Empty array ensures that effect is only run on mount and unmount\n  return keyPressed;\n}\n\nexport default function useSnake() {\n  const [currentDirection, setCurrentDirection] = useState();\n\n  const wPress = useKeyPress(\"w\");\n  const sPress = useKeyPress(\"s\");\n  const aPress = useKeyPress(\"a\");\n  const dPress = useKeyPress(\"d\");\n\n  const snakeRedcuer = (state, action) => {\n    switch (action.type) {\n      case \"MOVE\":\n        const snake = state.snake;\n        snake.unshift({\n          x: state.snake[0].x + action.direction.x,\n          y: state.snake[0].y + action.direction.y,\n        });\n\n        return {\n          ...state,\n          moves: [...state.moves, action.direction],\n          snake: snake,\n        };\n      case \"LOCATE\":\n        const snakeLocator = state.snake.unshift({\n          x: action.x,\n          y: action.y,\n        });\n        console.log(\"kir\");\n        return {\n          ...state,\n          snake: snakeLocator,\n        };\n      case \"EAT\":\n        let apple_x = state.apple.x;\n        let apple_y = state.apple.y;\n\n        const hasEatenFood =\n          state.snake[0].x === apple_x && state.snake[0].y === apple_y;\n\n        if (hasEatenFood) {\n          const apple_x = random_food(0, state.cols - 1);\n          const apple_y = random_food(0, state.rows - 1);\n          console.log(apple_x, apple_y);\n          return {\n            ...state,\n            apple: { x: apple_x, y: apple_y },\n          };\n        } else if (state.snake.length > 1) {\n          const snake = state.snake;\n          snake.pop();\n          return {\n            ...state,\n            snake: snake,\n          };\n        }\n        return state;\n      default:\n        break;\n    }\n  };\n\n  const [state, dispatch] = useReducer(snakeRedcuer, INIT_STATE);\n\n  const moveSnakeHandler = useCallback(() => {\n    switch (true) {\n      case wPress:\n        if (currentDirection !== NORTH && currentDirection !== SOUTH)\n          setCurrentDirection(NORTH);\n        break;\n      case sPress:\n        if (currentDirection !== SOUTH && currentDirection !== NORTH)\n          setCurrentDirection(SOUTH);\n        break;\n      case aPress:\n        if (currentDirection !== WEST && currentDirection !== EAST)\n          setCurrentDirection(WEST);\n        break;\n      case dPress:\n        if (currentDirection !== WEST && currentDirection !== EAST)\n          setCurrentDirection(EAST);\n        break;\n      default:\n        break;\n    }\n  }, [aPress, currentDirection, dPress, sPress, wPress]);\n\n  useEffect(() => moveSnakeHandler(), [moveSnakeHandler]);\n\n  // Reposition snake\n  useEffect(() => {\n    for (var i = 0; i < state.snake.length; i++) {\n      if (state.snake[i].x < 0)\n        dispatch({ type: \"LOCATE\", x: state.cols - 1, y: state.snake[i].y });\n\n      if (state.snake[i].y < 0)\n        dispatch({ type: \"LOCATE\", x: state.snake[i].x, y: state.rows - 1 });\n\n      if (state.snake[i].x > state.cols - 1)\n        dispatch({ type: \"LOCATE\", x: 0, y: state.snake[i].y });\n\n      if (state.snake[i].y > state.rows - 1)\n        dispatch({ type: \"LOCATE\", x: state.snake[i].x, y: 0 });\n    }\n  }, [state.cols, state.rows, state.snake]);\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      if (currentDirection) {\n        dispatch({ type: \"MOVE\", direction: currentDirection });\n        dispatch({ type: \"EAT\" });\n      }\n    }, state.speed);\n\n    return () => clearInterval(interval);\n  }, [currentDirection, state.moves, state.speed]);\n\n  return state;\n}\n"]},"metadata":{},"sourceType":"module"}